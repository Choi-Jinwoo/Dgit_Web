{"version":3,"sources":["stores/contribution/ContributionRepository.ts","stores/contribution/ContributionStore.ts","stores/totalTop/TotalTopRepository.ts","stores/totalTop/TotalTopStore.ts","stores/user/UserRepository.ts","stores/user/UserStore.ts","stores/index.ts","components/Rank/RankUserItem/RankUserItem.tsx","components/Rank/RankUser.tsx","components/Rank/RankLoading/RankLoading.tsx","containers/ContributionContainer.tsx","components/Title/Title.tsx","components/AddUserBox/AddUserBox.tsx","components/InfoBox/InfoBox.tsx","pages/RankPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["getTotalRank","a","axios","get","SERVER","data","ContributionStore","autobind","ContributionRepository","response","this","totalRank","observable","getTotalTopStreak","TotalTopStore","TotalTopRepository","totalTopStreak","currentStreak","applyUser","user","post","UserStore","UserRepository","stores","contributionStore","totalTopStore","userStore","React","createContext","RankUserItem","props","className","onClick","e","userID","window","open","location","href","rank","src","userImage","alt","name","color","size","getMedal","undefined","streak","totalContributions","bio","length","RankUser","rankUserItems","RankLoading","ContributionContainer","observer","handleStoreMethod","useCallback","map","useEffect","Title","AddUserBox","useState","modalIsOpen","setIsOpen","setName","setUserID","applyButtonDisable","setApplyButtonDisable","closeModal","alert","status","isOpen","onRequestClose","style","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","border","borderRadius","padding","fontSize","marginBottom","display","type","placeholder","value","onChange","target","boxSizing","width","margin","textAlign","marginTop","disabled","InfoBox","RankPage","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c39d60de.chunk.js","sourcesContent":["import axios from 'axios';\nimport { SERVER } from '../../config/config.json';\n\nclass ContributionRepository {\n  getTotalRank = async () => {\n    const data = await axios.get(`${SERVER}/contribution/total-rank`);\n    return data;\n  }\n}\n\nexport default new ContributionRepository();\n","import { observable } from 'mobx';\nimport { autobind } from 'core-decorators';\nimport ContributionRepository from './ContributionRepository';\nimport { IUser } from '../../types/user';\n\n@autobind\nclass ContributionStore {\n  @observable totalRank: IUser[] = [];\n\n  async getTotalRank(): Promise<void> {\n    const response = await ContributionRepository.getTotalRank();\n    this.totalRank = response.data.data.totalRank;\n  }\n}\n\nexport default ContributionStore;\n","import axios from 'axios';\nimport { SERVER } from '../../config/config.json';\n\nclass TotalTopRepository {\n  getTotalTopStreak = async () => {\n    const data = await axios.get(`${SERVER}/total-top/current-streak`);\n    return data;\n  }\n}\n\nexport default new TotalTopRepository();\n","import { autobind } from 'core-decorators';\nimport { observable } from 'mobx';\nimport TotalTopRepository from './TotalTopRepository';\n\n@autobind\nclass TotalTopStore {\n  @observable totalTopStreak!: number;\n\n  async getTotalTopStreak(): Promise<void> {\n    const response = await TotalTopRepository.getTotalTopStreak();\n    this.totalTopStreak = response.data.data.currentStreak;\n  }\n}\n\nexport default TotalTopStore;\n","import axios from 'axios';\nimport { SERVER } from '../../config/config.json';\nimport { IApplyUser } from '../../types/user';\n\nclass UserRepository {\n  applyUser = async (user: IApplyUser) => {\n    const data = await axios.post(`${SERVER}/user`, user);\n    return data;\n  }\n}\n\nexport default new UserRepository();\n","import { autobind } from 'core-decorators';\nimport { observable } from 'mobx';\nimport UserRepository from './UserRepository';\nimport { IApplyUser } from '../../types/user';\n\n@autobind\nclass UserStore {\n  @observable totalTopStreak!: number;\n\n  async applyUser(user: IApplyUser): Promise<void> {\n    await UserRepository.applyUser(user);\n  }\n}\n\nexport default UserStore;\n","import React from 'react';\nimport ContributionStore from './contribution/ContributionStore';\nimport TotalTopStore from './totalTop/TotalTopStore';\nimport UserStore from './user/UserStore';\n\nexport const stores = {\n  contributionStore: new ContributionStore(),\n  totalTopStore: new TotalTopStore(),\n  userStore: new UserStore(),\n}\n\nexport const storesContext = React.createContext({\n  ...stores,\n})\n\nexport const useStores = () => {\n  const store = React.useContext(storesContext);\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider');\n  }\n  return store;\n}","import React from 'react';\nimport { IUser } from '../../../types/user';\nimport { RiMedalLine } from 'react-icons/ri';\n\nimport './RankUserItem.scss';\n\ninterface IRankUserItemProps {\n  rank: number;\n  user: IUser;\n  streak?: number;\n}\n\nconst getMedal = (rank: number): JSX.Element | null => {\n  let color = null;\n  switch (rank) {\n    case 1:\n      color = '#ffd700';\n      break;\n    case 2:\n      color = '#c0c0c0';\n      break;\n    case 3:\n      color = '#b87333';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <RiMedalLine size='24px' color={color} />)\n}\n\nconst getStreak = (streak: number | undefined): JSX.Element | null => {\n  if (streak === undefined) {\n    return null;\n  }\n\n  return (\n    <span className=\"streakText\">\n      {streak}일 유지 중 🔥\n    </span>\n  )\n}\n\nconst moveToGithub = (userID: string) => {\n  window.open()!.location.href = `https://github.com/${userID}`;\n}\n\nconst RankUserItem = (props: IRankUserItemProps) => {\n  return (\n    <tr className='rankUserItem' onClick={(e) => moveToGithub(props.user.userID)}>\n      <td className='rankUserItem-rank'>\n        {props.rank}\n      </td>\n      <td className='rankUserItem-img'>\n        <img src={props.user.userImage} alt=\"\" />\n      </td>\n      <td className='rankUserItem-name'>\n        <div className='rankUserItem-name-wrapper'>\n          <div>\n            <p>\n              {props.user.name}\n            </p>\n            {getMedal(props.rank)}\n          </div>\n          {getStreak(props.streak)}\n        </div>\n      </td>\n      <td className='rankUserItem-userID'>{props.user.userID}</td>\n      <td className='rankUserItem-toatlContributions'>{props.user.totalContributions}</td>\n      <td className='rankUserItem-bio'>{!props.user.bio || !props.user.bio.length ? '-' : props.user.bio}</td>\n    </tr >\n  );\n}\n\nexport default RankUserItem;\n","import React from 'react';\n\nimport './RankUser.scss';\n\ninterface IRankUserProps {\n  rankUserItems: JSX.Element[];\n}\n\nconst RankUser = (props: IRankUserProps) => {\n  return (\n    <div className=\"rankUser\">\n      <table>\n        <thead>\n          <th>순위</th>\n          <th>프로필</th>\n          <th>이름</th>\n          <th>아이디</th>\n          <th>기여도</th>\n          <th>Bio</th>\n        </thead>\n\n        <tbody>\n          {props.rankUserItems}\n        </tbody>\n      </table>\n    </div >\n  )\n}\n\nexport default RankUser;\n","import React from 'react';\nimport { RiLoader2Line } from 'react-icons/ri';\n\nimport './RankLoading.scss';\n\nconst RankLoading = () => {\n  return (\n    <div className='rankLoading'>\n      <div>\n        <RiLoader2Line size='24px' />\n        <p>\n          <b>Github</b>과 동기화 중\n        </p>\n      </div>\n\n      <span>\n        약 20초 ~ 1분 소요됩니다\n        </span>\n    </div>\n  )\n}\n\nexport default RankLoading;\n","import React, { useCallback, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { stores } from '../stores';\nimport RankUserItem from '../components/Rank/RankUserItem/RankUserItem';\nimport RankUser from '../components/Rank/RankUser';\nimport RankLoading from '../components/Rank/RankLoading/RankLoading';\n\nconst ContributionContainer = observer(() => {\n  const { getTotalRank, totalRank } = stores.contributionStore;\n  const { getTotalTopStreak, totalTopStreak } = stores.totalTopStore;\n\n  const handleStoreMethod = useCallback(async () => {\n    try {\n      await getTotalRank();\n      await getTotalTopStreak();\n    } catch (err) { }\n  }, [getTotalRank, getTotalTopStreak]);\n\n  const rankUserItems: JSX.Element[] = totalRank.map((user, rank) => {\n    return rank === 0 ?\n      <RankUserItem rank={rank + 1} streak={totalTopStreak} user={user} /> :\n      <RankUserItem rank={rank + 1} user={user} />\n  });\n\n  useEffect(() => {\n    handleStoreMethod()\n  }, [handleStoreMethod]);\n\n  return (\n    rankUserItems.length === 0 ?\n      <RankLoading /> :\n      <RankUser rankUserItems={rankUserItems} />\n  );\n});\n\nexport default ContributionContainer;\n","import React from 'react';\n\nimport './Title.scss';\n\nconst Title = () => {\n  return (\n    <div className='title'>\n      <div className='title-content'>\n        <h2>DGIT</h2>\n        <div>\n          <p>Dgsw Github Rank</p>\n          <p>대구소프트웨어고등학교의 학생의 기여도 순위를 표시합니다</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Title;\n","import React from 'react';\n\nimport { IoMdPersonAdd } from 'react-icons/io'\nimport Modal from 'react-modal';\n\nimport './AddUserBox.scss';\nimport { stores } from '../../stores';\nimport { IApplyUser } from '../../types/user';\n\nconst AddUserBox = () => {\n\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [userID, setUserID] = React.useState('');\n  const [applyButtonDisable, setApplyButtonDisable] = React.useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  }\n\n  const closeModal = () => {\n    setIsOpen(false);\n  }\n\n  const customStyles: ReactModal.Styles = {\n    overlay: {\n      backgroundColor: 'rgba(0,0,0,0.4)'\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      border: 'none',\n      borderRadius: '3px',\n      padding: '60px 80px'\n    },\n  }\n\n  const applyUser = async () => {\n    setApplyButtonDisable(true);\n    const user: IApplyUser = {\n      name,\n      userID,\n    }\n\n    try {\n      await stores.userStore.applyUser(user);\n      alert('신청이 완료되었습니다. 승인후 적용됩니다');\n      closeModal();\n    } catch (err) {\n      if (err.response) {\n        const { status } = err.response;\n\n        if (status === 400) {\n          alert('아이디를 입력해주세요');\n        } else if (status === 404) {\n          alert('존재하지 않는 Github 아이디입니다');\n        } else if (status === 409) {\n          alert('이미 가입된 아이디입니다');\n        } else if (status === 500) {\n          alert('서버 오류가 발생하였습니다');\n        }\n      }\n    }\n    setApplyButtonDisable(false);\n    setName('');\n    setUserID('');\n  }\n\n  return (\n    <div className='AddUserBox'>\n      <IoMdPersonAdd className='IoMPersonAdd' color='a0a0a0' size='18px' onClick={openModal} />\n\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n      >\n        <h2 style={{\n          fontSize: '16px',\n          marginBottom: '30px',\n          color: '#ff6f61',\n        }}\n        >본인의 Github 아이디를 입력해주세요</h2>\n\n        <div style={{\n          display: 'felx',\n        }}>\n          <input type=\"text\" placeholder='Github 아이디'\n            value={userID}\n            onChange={(e) => setUserID(e.target.value)}\n            style={{\n              boxSizing: 'border-box',\n              border: 'none',\n              padding: '10px',\n              width: '100%',\n              marginBottom: '10px',\n            }} />\n          <input type=\"text\" placeholder='이름'\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            style={{\n              boxSizing: 'border-box',\n              border: 'none',\n              padding: '10px',\n              width: '100%',\n              marginBottom: '10px',\n            }} />\n        </div>\n        <p style={{\n          fontSize: '12px',\n          color: '#808080',\n          margin: 0,\n        }}>이름을 입력하지 않을 시 Github 이름이 적용됩니다</p>\n        <div style={{\n          textAlign: 'center',\n          marginTop: '50px',\n        }}>\n          <input type=\"button\" value=\"신청\" style={{\n            padding: '5px 10px',\n            width: '60px',\n            border: '1px solid #ff6f61',\n            borderRadius: '3px',\n            backgroundColor: applyButtonDisable ? '#e2e2e2' : '#ff6f61',\n            color: '#ffffff',\n          }} onClick={applyUser} disabled={applyButtonDisable} />\n        </div>\n      </Modal>\n    </div >\n  )\n}\n\nexport default AddUserBox;\n","import React from 'react';\n\nimport { AiFillInfoCircle } from 'react-icons/ai';\nimport Modal from 'react-modal';\n\nimport './InfoBox.scss';\n\nconst InfoBox = () => {\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  const openModal = () => {\n    setIsOpen(true);\n  }\n\n  const closeModal = () => {\n    setIsOpen(false);\n  }\n\n  const customStyles: ReactModal.Styles = {\n    overlay: {\n      backgroundColor: 'rgba(0,0,0,0.4)'\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      border: 'none',\n      borderRadius: '3px',\n      padding: '60px 80px'\n    },\n  }\n\n  return (\n    <div className='InfoBox'>\n      <AiFillInfoCircle className='AiFillInfoCircle' color='#ff6f61' size='18px' onClick={openModal} />\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n      >\n        <h2 style={{\n          fontSize: '16px',\n          marginBottom: '30px',\n          color: '#ff6f61',\n        }}\n        >안내사항</h2>\n\n        <ol style={{\n          fontSize: '14px',\n          color: '#808080',\n        }}>\n          <li style={{\n            padding: '10px',\n          }}>대구소프트웨어고등학교 재학생 혹은 졸업생 대상입니다</li>\n          <li style={{\n            padding: '10px',\n          }}>사용자가 본인의 ID를 등록하면 승인 후 표시합니다</li>\n          <li style={{\n            padding: '10px',\n          }}>정확한 정보를 위해 신청시 이름을 입력해주세요</li>\n          <li style={{\n            padding: '10px',\n          }}>비공개 저장소를 기여도로 표시하면 모든 기여도를 확인할 수 있습니다(Github설정)</li>\n          <li style={{\n            padding: '10px',\n          }}>사용자 정보 수정 및 삭제는 <a href=\"https://github.com/Choi-Jinwoo\">제작자</a>로 요청해주세요</li>\n          <li style={{\n            padding: '10px',\n          }}>자세한 사항은 <a href=\"https://github.com/Choi-Jinwoo/Dgit_Web/blob/master/README.md\">이곳</a>을 참고해주세요</li>\n        </ol>\n      </Modal>\n    </div>\n  )\n}\n\nexport default InfoBox;\n","import React from 'react';\nimport ContributionContainer from '../containers/ContributionContainer';\nimport Title from '../components/Title/Title';\nimport AddUserBox from '../components/AddUserBox/AddUserBox';\nimport InfoBox from '../components/InfoBox/InfoBox';\n\nimport './RankPage.scss'\n\nconst RankPage = () => {\n  return (\n    <div className='RankPage'>\n      <Title />\n      <div className='contributionContainer'>\n        <div className='utilBox'>\n          <AddUserBox />\n          <InfoBox />\n        </div>\n        <ContributionContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default RankPage;\n","import React from 'react';\nimport RankPage from '../pages/RankPage';\n\nimport '../style/common.scss';\n\n\nconst App = () => {\n  return (\n    <RankPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}